import child_process from"node:child_process";import fss from"node:fs";import stream from"node:stream/promises";import zlib from"node:zlib";import*as inquirer from"@inquirer/prompts";import{promiseEvent}from"./index.js";export function readLine(){return process.stdin.resume(),promiseEvent(process.stdin,`data`)}export async function sendEnter(e=`按回车键继续`){await inquirer.confirm({message:e})||process.exit()}export async function sendInfo(e=`请选择操作`){await inquirer.select({message:e,choices:[{name:`🔙 返回`,value:`back`},{name:`🔚 退出`,value:`exit`}]})===`exit`&&process.exit()}export function clearLine(){process.stdout.write(`\x1B[1A\r\x1B[2K`)}export function selectArray(e,c){let l=String(e.length+1).length,u=Array.isArray(e[0])?([e,c],u)=>({name:`${String(u+1).padStart(l)}. ${c}`,value:e}):(e,c)=>({name:`${String(c+1).padStart(l)}. ${e}`,value:e});return e.map(c?(e,l)=>({...u(e,l),description:c[l]}):u)}export async function lessZstd(d){let f=child_process.spawn(`less`,[`-RM`],{stdio:[`pipe`,`inherit`,`inherit`]});try{process.stdin.pipe(f.stdin),await Promise.all([stream.pipeline(fss.createReadStream(d),zlib.createZstdDecompress(),f.stdin),promiseEvent(f,`close`,`error`)])}catch(e){e?.code===`ENOENT`&&(await stream.pipeline(fss.createReadStream(d),zlib.createZstdDecompress(),process.stdout,{end:!1}),await sendInfo())}finally{f.kill()}}export async function less(u,d){let f=child_process.spawn(`less`,[`-RM${d?`+F`:``}`,u],{stdio:`inherit`});try{await promiseEvent(f,`close`,`error`)}catch(e){e?.code===`ENOENT`&&(await stream.pipeline(fss.createReadStream(u),process.stdout,{end:!1}),await sendInfo())}finally{f.kill()}}