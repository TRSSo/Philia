import{WebSocketServer}from"ws";import{promiseEvent}from"#util";import Client from"./client.js";export default class Server{logger;philia;wss;clients=new Map;constructor(t,n,r,i){this.logger=t,this.philia=n,this.wss=new WebSocketServer({...i,port:r}).on(`listening`,()=>{this.logger.info(`WebSocket 服务器已监听端口 ${r}`)}).on(`connection`,this.connected.bind(this)).on(`error`,e=>this.logger.error(e)).on(`close`,()=>{this.logger.info(`WebSocket 服务器已关闭`)})}connected(e,t){this.logger.info(`WebSocket 已连接`);let r=t.headers[`x-self-id`];if(!r)return e.terminate();if(this.clients.has(r)){let t=this.clients.get(r);t.open?(this.logger.warn(`WebSocket 客户端 ${r} 已存在`),e.terminate()):(t.ws=e,t.queue=Object.keys(t.cache),t.sendQueue())}else this.clients.set(r,new Client(this.logger,this.philia,e))}close(){for(let e of this.clients.values())e.close();return this.wss.close(),promiseEvent(this.wss,`close`,`error`)}}