import{isEqualObj,modeMatch}from"#util";export default class EventHandle{philia;handles=new Map;constructor(e){this.philia=e}receive(t,n){for(let r of Array.isArray(t)?t:[t]){let t=`${r.type}.${r.scene||``}`;delete r.type,delete r.scene;let i={client:n,...r},a=this.handles.get(t);a?a.some(t=>isEqualObj(i,t,2))||a.push(i):this.handles.set(t,[i])}}unreceive(t,n){for(let r of Array.isArray(t)?t:[t]){let t=`${r.type}.${r.scene||``}`;delete r.type,delete r.scene;let i=this.handles.get(t);if(!i)continue;let a={client:n,...r},o=i.findIndex(t=>isEqualObj(a,t,2));if(o===-1)continue;i.splice(o,1),i.length||this.handles.delete(t)}}handle(e){for(let n of[this.handles.get(`${e.type}.`),this.handles.get(`${e.type}.${e.scene}`)]){if(!n)continue;for(let r in n){let i=n[r];if(i.uid&&!(e.user?.id&&modeMatch(i.uid,e.user.id))||i.gid&&!(e.group?.id&&modeMatch(i.gid,e.group.id)))continue;if(!this.philia.clients.has(i.client)){n.splice(+r,1);continue}i.client.request(i.handle,e)}}}}