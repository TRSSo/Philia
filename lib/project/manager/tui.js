import child_process from"node:child_process";import fs from"node:fs/promises";import Path from"node:path";import{setTimeout}from"node:timers/promises";import*as inquirer from"@inquirer/prompts";import{Client as SocketClient}from"#connect/socket";import{createAPI}from"#protocol/common";import{chalk,getCodeDir,getDateTime,getTime}from"#util";import{less,lessZstd,selectArray,sendInfo}from"#util/tui.js";import*as type from"./type.js";export default class ProjectManagerTui{logger;path;name;client;api;constructor(e,u){this.logger=e,this.path=u,this.name=Path.basename(this.path),this.client=new SocketClient(e,{}),this.api=createAPI(this.client)}async main(){for(await this.connect().catch(()=>{});;)try{let e=await(this.client.open?this.openMenu():inquirer.select({message:`${this.name} 项目管理`,choices:[{name:`▶️ 启动`,value:`start`},{name:`📝 日志`,value:`log`},{name:`⚙️ 设置`,value:`setting`},{name:`📌 前台`,value:`foreground`},{name:`🗑️ 删除`,value:`delete`},{name:`🔙 返回`,value:`back`}]}));if(e&&await this[e]()===!1)break}catch(e){e?.name!==`ExitPromptError`&&this.logger.error(e),await sendInfo()}this.client.close().catch(()=>{})}async openMenu(){let e=await this.checkNotice(),u=[];e!==0&&u.push({name:`🔔 通知${typeof e==`object`?`: ${e.name}`:`(${e})`}`,value:`notice`});let d=new AbortController;return this.client.handle.setOnce(`newNotice`,()=>d.abort()),inquirer.select({message:`${this.name} 项目运行中`,choices:[...u,{name:`📝 日志`,value:`log`},{name:`⏹️ 停止`,value:`stop`},{name:`🔙 返回`,value:`back`}]},{signal:d.signal}).catch(e=>{if(!d.signal.aborted)throw e})}connect(){return this.client.connect(`${Path.resolve(this.path)}/Manager`,0)}async checkNotice(){let e=await this.api.countNotice();return e===1?(await this.api.listNotice())[0]:e}async handleNotice(e){let u=await inquirer.select({message:e.desc,choices:[e.input?{name:`📥 处理`,value:`handle`}:{name:`✅ 完成`,value:`done`},{name:`🔙 返回`,value:`back`}]}),d;switch(u){case`back`:return!1;case`handle`:d=await inquirer.input({message:`请输入数据:`,required:!0})}let f=await this.api.handleNotice({id:e.id,data:d});f&&await sendInfo(`处理结果: ${f}`)}async notice(e){for(e??=await this.api.listNotice();e.length;e=await this.api.listNotice()){if(e.length===1){if(await this.handleNotice(e[0])===!1)break;continue}let u=Symbol(`back`),d=await inquirer.select({message:`通知列表`,choices:[...selectArray(e.map(({name:e},u)=>[u,e]),e.map(({desc:e})=>e)),{name:`🔙 返回`,value:u}]});if(d===u)break;await this.handleNotice(e[d])}}async followLog(e,u=-1,d=Promise.withResolvers()){if(u===-1){let e=await this.checkNotice();e&&(typeof e==`object`?(this.logger.info(`收到新通知: ${e.name}`),await this.notice([e])):await this.notice())}else{let e=await this.api.listNotice();e.length&&(this.logger.info(`收到新通知: ${e[e.length-1].name}`),await this.notice(e))}let f=`receiveLog`;this.client.handle.set(f,e=>process.stdout.write(this.printLog(e)));let p=new AbortController;return this.client.handle.setOnce(`newNotice`,()=>p.abort()),inquirer.confirm({message:`正在监听实时日志，按回车键结束`},{signal:p.signal}).then(()=>p.signal.aborted||d.resolve(),e=>p.signal.aborted||d.reject(e)).finally(()=>{this.api.unfollowLog(),this.client.handle.del(f),p.signal.aborted&&this.followLog(e,Date.now(),d).catch(d.reject)}),process.stdout.write(`
`),await this.getLog({level:e,time:u,...u===-1?{lines:10}:{}}),await this.api.followLog({level:e,handle:f}),d.promise}printLog(e){let u=getTime(new Date(e.time)),d=type.LoggerLevel[e.level];return`${chalk[type.LoggerLevelColor[d]](`[${u}][${d.slice(0,4)}]`)}${e.name} ${e.data.join(` `)}\n`}async getLog(e){let u=await this.api.getLog(e);if(!u.length)return;let d=``;for(let e of u)d+=this.printLog(e);return process.stdout.write(d),u[u.length-1]}async requestLog(e){if(!e.lines||e.time&&e.time<0)return this.getLog(e);let u=e.time,d;for(;d=await this.getLog({...e,time:u});){if(!await inquirer.confirm({message:`往下查看${e.lines}条日志`}))return;u=d.time+1}if(await inquirer.confirm({message:`没有日志了，监听实时日志?`}))return this.followLog(e.level,u)}async fileLog(e=!1){let f=Path.join(this.path,`Log`),p=Symbol(`back`);for(;;){let m=await fs.readdir(f).catch(e=>{if(e.code===`ENOENT`)return[];throw e}),h=await inquirer.select({message:`选择日志分类`,choices:[...selectArray(m),{name:`🔙 返回`,value:p}]});if(h===p)break;let g=Path.join(f,h);for(;;){let f=await fs.readdir(g).catch(e=>{if(e.code===`ENOENT`)return[];throw e}),m=await inquirer.select({message:`选择日志文件`,choices:[...selectArray(f),{name:`🔙 返回`,value:p}]});if(m===p)break;let h=Path.join(g,m);await(m.endsWith(`.zst`)?lessZstd(h):less(h,e))}}}async log(){if(!this.client.open)return this.fileLog();let e=await inquirer.select({message:`请选择查看类型`,choices:[{name:`⏱️ 实时日志`,value:`now`},{name:`📜 历史日志`,value:`history`},{name:`📄 文件日志`,value:`file`}]});if(e===`file`)return this.fileLog(!0);let u=type.LoggerLevel[await inquirer.select({message:`请选择日志等级`,choices:selectArray(Object.keys(type.LoggerLevelColor))})];if(e===`now`)return this.followLog(u);let d=await inquirer.number({message:`请输入获取行数:`,default:10,min:1}),f=await inquirer.input({message:`请输入开始时间:`,default:getDateTime(new Date(Date.now()-6e5)),validate(e){return e&&Number.isNaN(Date.parse(e))?`时间格式错误`:!0}});await this.requestLog({level:u,lines:d,time:f?Date.parse(f):void 0})}async start(){let u=child_process.spawn(process.execPath,[Path.join(getCodeDir(),`bin`,`run`),this.path],{detached:!0});u.stdout.pipe(process.stdout),u.stderr.pipe(process.stderr);for(let e=0;e<30;e++)try{if(await setTimeout(500),u.exitCode!==null)break;if(await this.connect(),this.client.open)return await this.api.closeConsole(),u.stdin.end(),u.stdout.destroy(),u.stderr.destroy(),u.unref(),sendInfo(`启动完成`)}catch{}return u.kill(`SIGKILL`),sendInfo(`启动错误(${u.exitCode})`)}foreground(){try{return process.execve(process.execPath,[process.execPath,Path.join(getCodeDir(),`bin`,`run`),this.path],process.env)}catch{}return child_process.spawnSync(process.execPath,[Path.join(getCodeDir(),`bin`,`run`),this.path],{stdio:`inherit`})}async stop(){await this.api.stop();let e=Promise.withResolvers();return this.client.closed_fn=e.resolve,e.promise}setting(){}async delete(){if(await inquirer.confirm({message:`是否删除项目?`}))return await fs.rm(this.path,{recursive:!0}),!1}back(){return!1}}