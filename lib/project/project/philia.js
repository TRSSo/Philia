import fs from"node:fs/promises";import Path from"node:path";import*as inquirer from"@inquirer/prompts";import YAML from"yaml";import*as Socket from"#connect/socket";import*as WebSocket from"#connect/websocket";import{makeLogger}from"#logger";import{getRootDir}from"#util";import{selectArray}from"#util/tui.js";export class Project{config;handles;logger;server;clients=new Set;http;constructor(e,r={}){this.config=e,this.handles=r,this.verifyConfig(),this.logger=makeLogger(e.name,e.logger?.level,e.logger?.inspect)}static async getClientProject(o){let s=Path.join(getRootDir(),`Project`,o),c=(await fs.readdir(s).catch(()=>[])).map(async i=>[i,YAML.parse(await fs.readFile(Path.join(s,i,`config.yml`),`utf8`)).philia]),l=[];for(let e of await Promise.allSettled(c))e.status===`fulfilled`&&e.value[1].name===`Philia`&&e.value[1].type===`Socket`&&e.value[1].role===`Server`&&l.push([Path.join(o,e.value[0]),e.value[0]]);let u=Symbol(`custom`);l.push([u,`自定义`]);let d=await inquirer.checkbox({message:`请选择项目`,choices:selectArray(l)}),f=d.indexOf(u);if(f!==-1&&(d.splice(f,1),d.push(...(await inquirer.input({message:`请输入 Philia Socket 服务器地址，多个按半角逗号分隔:`})).split(`,`).map(e=>`file://${e.trim()}`).filter(e=>e!==`file://`))),!d.length)throw TypeError(`连接地址不能为空`);return d}static async createConfig(e,r){let a=await inquirer.select({message:`请选择 Philia 协议类型`,choices:[{name:`Socket`,value:`Socket`},{name:`WebSocket`,value:`WebSocket`}]});r??=await inquirer.select({message:`请选择 Philia 协议端类型`,choices:[{name:`服务端`,value:`Server`},{name:`客户端`,value:`Client`}]});let o;switch(a){case`Socket`:r===`Client`&&(o=await Project.getClientProject(e));break;case`WebSocket`:o=r===`Server`?await inquirer.number({message:`请输入 Philia WebSocket 服务器监听端口:`,min:1,max:65535,required:!0}):(await inquirer.input({message:`请输入 Philia WebSocket 服务器地址，多个按半角逗号分隔:`,default:`ws://localhost:2536`,required:!0})).split(`,`);break}return{name:`Philia`,type:a,role:r,path:o}}verifyConfig(){if(this.config.role!==`Server`&&this.config.role!==`Client`)throw TypeError(`Philia 协议端类型必须为 Server 或 Client`);switch(this.config.type){case`Socket`:if(this.config.role===`Client`){if(!Array.isArray(this.config.path)||this.config.path.some(e=>typeof e!=`string`))throw TypeError(`Philia 客户端地址必须为字符串数组`)}else if(this.config.path&&typeof this.config.path!=`string`)throw TypeError(`Philia 服务端监听地址必须为字符串`);break;case`WebSocket`:if(this.config.role===`Client`){if(!Array.isArray(this.config.path)||this.config.path.some(e=>typeof e!=`string`))throw TypeError(`Philia 客户端地址必须为字符串数组`)}else if(typeof this.config.path!=`number`||this.config.path<1||this.config.path>65535)throw TypeError(`Philia 服务端监听端口必须为1-65535`);break;default:throw TypeError(`Philia 协议类型必须为 Socket 或 WebSocket`)}}async httpStart(){if(this.config.http)return this.http=new(await(import(`#connect/common/http.js`))).default(this.config.http,this.logger,this.handles),this.http.start()}start(){switch(this.httpStart(),this.config.type){case`Socket`:return this.config.role===`Client`?Promise.allSettled(this.config.path.map(e=>{e.startsWith(`file://`)?e=e.slice(7):e.startsWith(`tcp://`)||(e=Path.join(getRootDir(),`Project`,e,this.config.name));let i=new Socket.Client(this.logger,this.handles,this.config.opts);return this.clients.add(i),i.connect(e)})):(this.server=new Socket.Server(this.logger,this.handles,this.config.opts),this.clients=this.server.clients,this.config.path?this.config.path.startsWith(`tcp://`)||(this.config.path=this.config.path):this.config.path=this.config.name,this.server.listen(this.config.path));case`WebSocket`:return this.config.role===`Client`?Promise.allSettled(this.config.path.map(e=>{let r=new WebSocket.Client(this.logger,this.handles,this.config.opts);return this.clients.add(r),r.connect(e)})):(this.server=new WebSocket.Server(this.logger,this.handles,this.config.opts),this.clients=this.server.clients,this.server.listen(this.config.path))}}stop(){return this.http&&this.http.stop(),this.config.role===`Server`?this.server?.close():Promise.allSettled([...this.clients].map(e=>e.close()))}}