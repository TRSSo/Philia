import fs from"node:fs/promises";import Path from"node:path";import*as inquirer from"@inquirer/prompts";import YAML from"yaml";import{selectArray,sendInfo}from"#util/tui.js";import ProjectManagerTui from"./manager/tui.js";import*as Project from"./project/index.js";export default class Tui{logger;impl_path=Path.join(`Project`,`Impl`);app_path=Path.join(`Project`,`App`);constructor(e){this.logger=e}async main(){for(;;)try{let e=await this.list(),r=Symbol(`create`),a=Symbol(`exit`),o=await inquirer.select({message:`欢迎使用 Philia 项目管理器`,choices:[...e,{name:`🆕 创建项目`,value:r},{name:`🔚 退出`,value:a}],pageSize:e.length+2});switch(o){case r:await this.create();break;case a:this.exit();break;default:await new ProjectManagerTui(this.logger,o).main()}}catch(e){e?.name!==`ExitPromptError`&&this.logger.error(e),await sendInfo()}}async list(){let a=[],o=await fs.readdir(this.impl_path).catch(()=>[]);if(o.length){a.push(new inquirer.Separator(`────实现端────`));for(let e of o)a.push({name:`${a.length+1}. ${e}`,value:Path.join(this.impl_path,e)})}let s=await fs.readdir(this.app_path).catch(()=>[]);if(s.length){a.push(new inquirer.Separator(`────应用端────`));for(let e of s)a.push({name:`${a.length+1}. ${e}`,value:Path.join(this.app_path,e)})}return a.length&&a.push(new inquirer.Separator(`──────────────`)),a}async create(){let c=await inquirer.select({message:`请选择 Philia 类型`,choices:[{name:`实现端`,value:`impl`},{name:`应用端`,value:`app`}]}),l=Object.keys(Project[c]);if(!l.length)return sendInfo(`没有可创建项目`);let u=await inquirer.select({message:`选择创建项目`,choices:selectArray(l)}),d=(await Project[c][u]()).Project,f=await d.createConfig(u),p=await inquirer.input({message:`请输入项目名:`,validate:async i=>Path.basename(i)===i?await fs.stat(Path.join(this[`${c}_path`],i)).catch(()=>!1)?`项目已存在`:!0:`输入无效`,required:!0,default:f.name});p=Path.join(this[`${c}_path`],p),await fs.mkdir(p,{recursive:!0});let m=process.cwd();try{process.chdir(p),new d(f),await fs.writeFile(`config.yml`,YAML.stringify(f))}catch(r){throw await fs.rm(process.cwd(),{recursive:!0}),r}finally{process.chdir(m)}await new ProjectManagerTui(this.logger,p).main()}exit(){process.exit()}}