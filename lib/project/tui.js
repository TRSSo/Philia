import fs from"node:fs/promises";import Path from"node:path";import*as inquirer from"@inquirer/prompts";import YAML from"yaml";import{getProjectDir}from"#util";import{selectArray,sendInfo}from"#util/tui.js";import ProjectManagerTui from"./manager/tui.js";import*as Project from"./project/index.js";export default class Tui{logger;impl_path=getProjectDir(`Impl`);app_path=getProjectDir(`App`);constructor(e){this.logger=e}async main(){for(;;)try{let e=await this.list(),i=Symbol(`create`),o=Symbol(`exit`),s=await inquirer.select({message:`欢迎使用 Philia 项目管理器`,choices:[...e,{name:`🆕 创建项目`,value:i},{name:`🔚 退出`,value:o}],pageSize:e.length+2});switch(s){case i:await this.create();break;case o:this.exit();break;default:await new ProjectManagerTui(this.logger,s).main()}}catch(e){e?.name!==`ExitPromptError`&&this.logger.error(e),await sendInfo()}}async list(){let o=[],s=await fs.readdir(this.impl_path).catch(()=>[]);if(s.length){o.push(new inquirer.Separator(`────实现端────`));for(let e of s)o.push({name:`${o.length+1}. ${e}`,value:Path.join(this.impl_path,e)})}let c=await fs.readdir(this.app_path).catch(()=>[]);if(c.length){o.push(new inquirer.Separator(`────应用端────`));for(let e of c)o.push({name:`${o.length+1}. ${e}`,value:Path.join(this.app_path,e)})}return o.length&&o.push(new inquirer.Separator(`──────────────`)),o}async create(){let s=await inquirer.select({message:`请选择 Philia 类型`,choices:[{name:`实现端`,value:`impl`},{name:`应用端`,value:`app`}]}),l=Object.keys(Project[s]);if(!l.length)return sendInfo(`没有可创建项目`);let u=await inquirer.select({message:`选择创建项目`,choices:selectArray(l)}),d=(await Project[s][u]()).Project,f=await d.createConfig(u),p=await inquirer.input({message:`请输入项目名:`,validate:async a=>Path.basename(a)===a?await fs.stat(Path.join(this[`${s}_path`],a)).catch(()=>!1)?`项目已存在`:!0:`输入无效`,required:!0,default:f.name});p=Path.join(this[`${s}_path`],p),await fs.mkdir(p,{recursive:!0});let m=process.cwd();try{process.chdir(p),new d(f),await fs.writeFile(`config.yml`,YAML.stringify(f))}catch(i){throw await fs.rm(process.cwd(),{recursive:!0}),i}finally{process.chdir(m)}await new ProjectManagerTui(this.logger,p).main()}exit(){process.exit()}}