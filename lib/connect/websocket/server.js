import{ulid}from"ulid";import{WebSocketServer}from"ws";import{getSocketAddress,getSocketRemoteAddress,promiseEvent}from"#util";import OClient from"./client.js";export class Server{logger;handle;opts;ws;ws_opts;wss=new Set;clients=new Set;meta={id:ulid(),name:`Server`};limit;constructor(e,a={},o={}){this.logger=e,this.handle=a,this.opts=o,o.limit&&(this.limit=o.limit),o.ws instanceof WebSocketServer?this.ws=o.ws:this.ws_opts=o.ws}listen(e,...o){return e&&(this.ws_opts={...this.ws_opts,port:e}),this.ws??=new WebSocketServer(this.ws_opts,...o),this.ws.on(`listening`,()=>{this.logger.info(`WebSocket 服务器已监听在`,getSocketAddress(this.ws))}).on(`connection`,(e,i)=>{if(this.limit&&this.wss.size>=this.limit)return this.logger.warn(`连接数已达上限，已断开1个连接，剩余${this.wss.size}个连接`),e.terminate();new Client(this,e,i)}).on(`error`,e=>this.logger.error(e)).on(`close`,()=>{this.logger.info(`WebSocket 服务器已关闭`)}),promiseEvent(this.ws,`listening`,`error`)}add(e){this.wss.add(e.event),this.clients.add(e)}del(e){this.wss.delete(e.event),this.clients.delete(e)}listener={connected(){this.server.add(this),this.onconnected(`共${this.server.wss.size}个连接`),this.heartbeat()},close(){this.server.del(this),this.onclose(`剩余${this.server.wss.size}个连接`)}};async close(){return await Promise.allSettled([...this.clients].map(e=>e.close())),this.ws.close(),promiseEvent(this.ws,`close`,`error`)}}export default Server;class Client extends OClient{server;constructor(e,i,a){let s=getSocketRemoteAddress(a.socket);for(let a in super(e.logger,e.handle,{...e.opts,ws:i}),this.server=e,Object.assign(this.meta.local,e.meta),e.listener)this.listener[a]=e.listener[a].bind(this);this.onconnect().catch(e=>{this.logger.error(...s,`连接错误`,e),this.forceClose()})}}