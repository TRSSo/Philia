import{Server as SocketServer}from"node:net";import os from"node:os";import Path from"node:path";import{ulid}from"ulid";import{getSocketAddress,getSocketRemoteAddress,promiseEvent}from"#util";import OClient from"./client.js";export class Server{logger;handle;opts;socket;sockets=new Set;clients=new Set;meta={id:ulid(),name:`Server`};path=``;limit;constructor(s,c={},l={}){this.logger=s,this.handle=c,this.opts=l,l.limit&&(this.limit=l.limit),l.path&&(this.path=l.path),l.socket instanceof SocketServer?this.socket=l.socket:this.socket=new SocketServer(l.socket),this.socket.on(`listening`,()=>{this.logger.info(`Socket 服务器已监听在`,getSocketAddress(this.socket))}).on(`connection`,e=>{if(this.limit&&this.sockets.size>=this.limit)return this.logger.warn(`连接数已达上限，已断开1个连接，剩余${this.sockets.size}个连接`),e.destroy();new Client(this,e)}).on(`error`,e=>this.logger.error(e)).on(`close`,()=>{this.logger.info(`Socket 服务器已关闭`)})}listen(e=this.path,...l){if(e.startsWith(`tcp://`)){let[s,c]=e.slice(6).split(`:`);this.socket.listen(Number(c),s);return}switch(e=Path.resolve(e),os.type()){case`Linux`:e=`\0${e}`;break;case`Windows_NT`:e=Path.join(`\\\\?\\pipe`,e);break}return this.socket.listen(e,...l),promiseEvent(this.socket,`listening`,`error`)}add(e){this.sockets.add(e.event),this.clients.add(e)}del(e){this.sockets.delete(e.event),this.clients.delete(e)}listener={connected(){this.server.add(this),this.onconnected(`共${this.server.sockets.size}个连接`)},close(){this.server.del(this),this.onclose(`剩余${this.server.sockets.size}个连接`)}};async close(){return await Promise.allSettled([...this.clients].map(e=>e.close())),this.socket.close(),promiseEvent(this.socket,`close`,`error`)}}export default Server;class Client extends OClient{server;constructor(e,s){let c=getSocketRemoteAddress(s);for(let c in super(e.logger,e.handle,{...e.opts,socket:s}),this.server=e,this.logger=this.server.logger,Object.assign(this.meta.local,e.meta),e.listener)this.listener[c]=e.listener[c].bind(this);this.onconnect().catch(e=>{this.logger.error(...c,`连接错误`,e),this.forceClose()})}}