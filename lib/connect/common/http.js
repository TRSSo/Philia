import http from"node:http";import https from"node:https";import{getRequestInfo,getSocketAddress,promiseEvent}from"#util";import{compress,encoder}from"./encoder.js";import Handle from"./handle.js";export default class HTTP{config;logger;server;handle;timeout_idle=3e5;headers={"Accept-Encoding":Array.from(compress.keys()).map(e=>e.toLowerCase()).join(`, `)};constructor(r={},a,o){this.config=r,this.logger=a,this.handle=new Handle(o,{logger:a}),this.server=r.https?https.createServer(r.https):http.createServer(r.opts??{}),this.server.on(`listening`,()=>this.logger.info(`HTTP 服务器已监听在 http${r.https?`s`:``}://${getSocketAddress(this.server)}`)).on(`request`,this.request.bind(this)).on(`error`,e=>this.logger.error(e)).on(`close`,()=>{this.logger.info(`WebSocket 服务器已关闭`)})}start(){return this.server.listen(this.config.port,this.config.host),promiseEvent(this.server,`listening`,`error`)}stop(){return this.server.close(),promiseEvent(this.server,`close`,`error`)}readPostData(e){let{promise:n,resolve:r,reject:i}=Promise.withResolvers(),a=[];return e.on(`data`,e=>a.push(e)),e.on(`error`,i),e.on(`close`,()=>i(Error(`请求被关闭`))),e.on(`end`,()=>{try{let n=Buffer.concat(a);if(e.headers[`content-encoding`]){let r=compress.get(e.headers[`content-encoding`].toUpperCase())?.decode;if(!r)throw Error(`不支持的编码格式`);n=r(n)}e.headers[`content-type`]===`application/vnd.msgpack`?r(encoder.get(`MsgPack`).decode(n)):r(encoder.get(`JSON`).decode(n))}catch(e){i(e)}}),n.finally(()=>e.removeAllListeners())}async request(e,n){let[i,a]=getRequestInfo(e),s=(r,i)=>{try{if(n.closed)return;let s;if(i!==void 0){e.headers[`content-type`]===`application/vnd.msgpack`?(s=encoder.get(`MsgPack`).encode(i),n.setHeader(`Content-Type`,`application/vnd.msgpack`)):(s=encoder.get(`JSON`).encode(i),n.setHeader(`Content-Type`,`application/json`));let r=[];e.headers[`content-encoding`]&&r.push(e.headers[`content-encoding`]),e.headers[`accept-encoding`]&&r.push(...e.headers[`accept-encoding`].split(`,`));for(let e of r.map(e=>e.trim())){let r=compress.get(e.toUpperCase())?.encode;if(!r)continue;s=r(s),n.setHeader(`Content-Encoding`,e);break}n.setHeader(`Content-Length`,s.length)}n.writeHead(r,this.headers),s&&n.write(s),this.logger.trace(`HTTP`,e.method,`回复`,a,r,n.getHeaders(),i??``)}catch(o){this.logger.error(`HTTP`,e.method,`回复`,a,r,n.getHeaders(),i??``,o)}n.end()},c=URL.parse(e.url,`http://localhost`);if(!c)return s(400);let l={req:e,res:n,reply:s,async:!!c.searchParams.get(`async`),id:c.searchParams.get(`id`),name:c.pathname.slice(1),code:0};if(e.method===`POST`)try{l.data=await this.readPostData(e),this.logger.trace(`HTTP`,e.method,`请求`,a,i,e.headers,l.data)}catch(n){return this.logger.error(`HTTP`,e.method,`请求`,a,i,e.headers,n),s(400)}else if(this.logger.trace(`HTTP`,e.method,`请求`,a,i,e.headers),e.method!==`GET`)return s(405);if(l.id){let e=this.handle.reply_cache[l.id];if(e)return l.id=null,this.reply(l,e.code,e.data)}return this.handle.request(l,this.reply.bind(this,l))}reply(e,n,r){switch(e.id&&(this.handle.reply_cache[e.id]={id:e.id,code:n,data:r},setTimeout(()=>delete this.handle.reply_cache[e.id],this.timeout_idle)),n){case 1:e.reply(200,r);break;case 2:e.async&&e.reply(202);break;default:r.name===`NotFoundError`?e.reply(404):e.reply(500,r)}}}