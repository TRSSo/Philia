import crypto from"node:crypto";import v8 from"node:v8";import zlib from"node:zlib";import*as msgpack from"msgpackr";import{findArrays,makeError,toJSON}from"#util";export const encoder=new Map;encoder.set(`MsgPack`,{encode:msgpack.pack,decode:msgpack.unpack}),encoder.set(`V8Serializer`,{encode(e){try{return v8.serialize(e)}catch{return v8.serialize(JSON.parse(toJSON(e)))}},decode:v8.deserialize}),encoder.set(`JSON`,{encode:e=>Buffer.from(toJSON(e)),decode:JSON.parse});export const verify=new Map;verify.set(`None`,{}),verify.set(`CRC32`,{encode(e){let s=Buffer.allocUnsafe(4);return s.writeUint32BE(zlib.crc32(e)),Buffer.concat([s,e])},decode(e){let s=e.readUint32BE();e=e.subarray(4);let l=zlib.crc32(e);if(l!==s)throw makeError(`数据校验失败`,{now:l,hash:s,data:e});return e}});export const cryptoHash=(s,c)=>({encode(c){let l=crypto.createHash(s).update(c).digest();return Buffer.concat([l,c])},decode(l){let u=l.subarray(0,c);l=l.subarray(c);let d=crypto.createHash(s).update(l).digest();if(!u.equals(d))throw makeError(`数据校验失败`,{now:d,hash:u,data:l});return l}});verify.set(`MD5`,cryptoHash(`md5`,16)),verify.set(`SHA256`,cryptoHash(`sha256`,32)),verify.set(`SHA3-512`,cryptoHash(`sha3-512`,64));export const compress=new Map;compress.set(`ZSTD`,{encode:zlib.zstdCompressSync,decode:zlib.zstdDecompressSync}),compress.set(`GZIP`,{encode:zlib.gzipSync,decode:zlib.gunzipSync});export class Encoder{encoder;verify;encode=e=>this.verify.encode(this.encoder.encode(e));decode=e=>this.encoder.decode(this.verify.decode(e));constructor(e,s){if(!e||!s){this.encoder=encoder.get(`JSON`),this.verify=verify.get(`CRC32`);return}let c=findArrays(e.encode,s.encode);if(!c)throw makeError(`协议编码不支持`,{local:e,remote:s});let l=findArrays(s.encode,e.encode);if(this.encoder={encode:encoder.get(c).encode,decode:encoder.get(l).decode},c=findArrays(e.verify,s.verify),!c)throw makeError(`协议校验不支持`,{local:e,remote:s});l=findArrays(s.verify,e.verify),this.verify={encode:(verify.get(c)??compress.get(c)).encode,decode:(verify.get(l)??compress.get(l)).decode},this.verify.encode===void 0&&(this.encode=e=>this.encoder.encode(e)),this.verify.decode===void 0&&(this.decode=e=>this.encoder.decode(e))}}