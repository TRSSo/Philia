import crypto from"node:crypto";import v8 from"node:v8";import zlib from"node:zlib";import{findArrays,makeError,toJSON}from"#util";export const encoder=new Map;encoder.set(`MsgPack`,{encode:(await import(`msgpackr`)).pack,decode:(await import(`msgpackr`)).unpack}),encoder.set(`CBOR`,{encode:(await import(`cbor-x`)).encode,decode:(await import(`cbor-x`)).decode}),encoder.set(`V8Serializer`,{encode(e){try{return v8.serialize(e)}catch{return v8.serialize(JSON.parse(toJSON(e)))}},decode:v8.deserialize}),encoder.set(`JSON`,{encode:e=>Buffer.from(toJSON(e)),decode:JSON.parse});export const verify=new Map;verify.set(`None`,{encode:e=>e,decode:e=>e}),verify.set(`CRC32`,{encode(e){let o=Buffer.allocUnsafe(4);return o.writeUint32BE(zlib.crc32(e)),Buffer.concat([o,e])},decode(e){let o=e.readUint32BE();e=e.subarray(4);let c=zlib.crc32(e);if(c!==o)throw makeError(`数据校验失败`,{now:c,hash:o,data:e});return e}});export const cryptoHash=(o,s)=>({encode(s){let c=crypto.createHash(o).update(s).digest();return Buffer.concat([c,s])},decode(c){let l=c.subarray(0,s);c=c.subarray(s);let u=crypto.createHash(o).update(c).digest();if(!l.equals(u))throw makeError(`数据校验失败`,{now:u,hash:l,data:c});return c}});verify.set(`MD5`,cryptoHash(`md5`,16)),verify.set(`SHA256`,cryptoHash(`sha256`,32)),verify.set(`SHA3-512`,cryptoHash(`sha3-512`,64));export const compress=new Map;compress.set(`ZSTD`,{encode:zlib.zstdCompressSync,decode:zlib.zstdDecompressSync}),compress.set(`GZIP`,{encode:zlib.gzipSync,decode:zlib.gunzipSync});export class Encoder{encoder;verify;encode=e=>this.verify.encode(this.encoder.encode(e));decode=e=>this.encoder.decode(this.verify.decode(e));constructor(e,o){if(!e||!o){this.encoder=encoder.get(`JSON`),this.verify=verify.get(`CRC32`);return}let s=findArrays(e.encode,o.encode);if(!s)throw makeError(`协议编码不支持`,{local:e,remote:o});let l=findArrays(o.encode,e.encode);if(this.encoder={encode:encoder.get(s).encode,decode:encoder.get(l).decode},s=findArrays(e.verify,o.verify),!s)throw makeError(`协议校验不支持`,{local:e,remote:o});l=findArrays(o.verify,e.verify),this.verify={encode:(verify.get(s)??compress.get(s)).encode,decode:(verify.get(l)??compress.get(l)).decode},s===`None`&&(this.encode=e=>this.encoder.encode(e)),l===`None`&&(this.decode=e=>this.encoder.decode(e))}}