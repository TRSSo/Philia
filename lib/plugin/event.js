import{chalk}from"#util";import{Context}from"./context.js";export const HOOK=chalk.yellow(`[钩子]`);export const MIDDLEWARE=chalk.yellow(`[中间件]`);export const EVENT=chalk.yellow(`[事件]`);export const COMMAND=chalk.yellow(`[命令]`);export class EventHandle{project;hooks=new Set;constructor(e){this.project=e}handle(e,t){let n=this.project.ctx_map.get(t);return n?this.hook(e,n):this.project.logger.warn(`客户端上下文不存在`,t)}async hook(e,r){for(let i of this.hooks){if(i.type!==e.type||i.scene&&i.scene!==e.scene||i.uid&&i.uid!==e.user.id||i.gid&&i.gid!==e.group?.id)continue;let a=new Context(e,i.plugin,this.project,r);a.logger.debug(`${HOOK}开始执行`);try{let e=await i.method(a);if(a.logger.debug(`${HOOK}执行完成`),e===!1)continue}catch(e){a.logger.error(`${HOOK}执行错误`,e)}return!0}return this.middleware(e,r)}middleware(e,n){let i=this.project.plugin.middleware,a=-1,o=async s=>{if(s!==a)throw n.logger.error(i[s].plugin.name,`${MIDDLEWARE}重复调用 next()`),Error(`中间件重复调用 next()`);do if(a++,a>=i.length)return this.event(e,n);while(i[a].type!==e.type||i[a].scene&&i[a].scene!==e.scene);let c=new Context(e,i[a].plugin,this.project,n);c.logger.debug(`${MIDDLEWARE}开始执行`);try{let e=await i[a].method(c,o.bind(void 0,a));return c.logger.debug(`${MIDDLEWARE}执行完成`),e}catch(e){return c.logger.error(`${MIDDLEWARE}执行错误`,e),!0}};return o(a)}async event(e,n){if(e.type===`message`&&await this.command(e,n)===!0)return!0;for(let r of this.project.plugin.event){if(r.type!==e.type||r.scene&&r.scene!==e.scene)continue;let a=new Context(e,r.plugin,this.project,n);a.logger.debug(`${EVENT}开始执行`);try{await r.method(a),a.logger.debug(`${EVENT}执行完成`)}catch(e){a.logger.error(`${EVENT}执行错误`,e)}return!0}return!1}async command(e,n){let r=e.message.reduce((e,t)=>t.type===`text`?e+t.data:e,``);if(!r.startsWith(this.project.config.command.prefix))return!1;r=r.slice(this.project.config.command.prefix.length);let i=this.project.config.command.split;for(let o of this.project.plugin.command){if(o.scene&&o.scene!==e.scene)continue;let s;try{if(Array.isArray(o.cmd)){let e=o.cmd.find(e=>r.startsWith(`${e}${i}`));if(!e)continue;s=[e,r.slice(e.length+i.length)]}else if(o.cmd instanceof RegExp){let e=r.match(o.cmd);if(!e)continue;s=[e]}else{if(!r.startsWith(`${o.cmd}${i}`))continue;s=[r.slice(o.cmd.length+i.length)]}}catch(e){n.logger.error(o.plugin.name,o.cmd,`${COMMAND}匹配错误`,e);continue}let c=new Context(e,o.plugin,this.project,n);c.logger.debug(`${COMMAND}开始执行`,...s);try{await o.method(c,...s),c.logger.debug(`${COMMAND}执行完成`)}catch(e){c.logger.error(`${COMMAND}执行错误`,e)}return!0}return!1}}