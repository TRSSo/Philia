export class Context{event;plugin;project;api;self;client;logger;constructor(e,t,n,r){this.event=e,this.plugin=t,this.project=n,this.api=r.api,this.self=r.self,this.client=r.client,this.logger=n.plugin.makeLogger(r.logger,t.name)}get hook(){let e={type:this.event.type,scene:this.event.scene,uid:this.event.user.id};return this.event.group?.id&&(e.gid=this.event.group.id),{set:(t,n=e)=>{let r={...n,plugin:this.plugin,method:e=>t(e,()=>this.project.event.hooks.delete(r))};this.project.event.hooks.add(r)},once:(t,n=e)=>{let r={...n,plugin:this.plugin,method:e=>(this.project.event.hooks.delete(r),t(e))};this.project.event.hooks.add(r)},promise:(t=e)=>{let{promise:n,resolve:r}=Promise.withResolvers(),i={...t,plugin:this.plugin,method:r};return this.project.event.hooks.add(i),n.finally(this.project.event.hooks.delete.bind(this.project.event.hooks,i))}}}reply(e){return this.event.group?.id&&this.event.scene!==`group_invite`?this.api.sendMsg({scene:`group`,id:this.event.group.id,data:e}):this.api.sendMsg({scene:`user`,id:this.event.user.id,data:e})}request(e,t,n){if(this.event.type!==`request`)throw Error(`无法处理非请求事件`);return this.api.setRequest({id:this.event.id,result:e,reason:t,block:n})}}