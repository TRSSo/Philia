export class createPlugin{plugin;constructor(e,t,n=0){this.plugin={name:e,desc:t,priority:n}}command(e,t,n){return this.plugin.command??=[],this.plugin.command.push({...n,cmd:e,method:t}),this}middleware(e,t={type:`message`}){return this.plugin.middleware??=[],this.plugin.middleware.push({...t,method:e}),this}event(e,t){return this.plugin.event??=[],this.plugin.event.push({...e,method:t}),this}schedule(e,t){return this.plugin.schedule??=[],this.plugin.schedule.push({spec:e,method:t}),this}start(e){return this.plugin.start=e,this}stop(e){return this.plugin.stop=e,this}connect(e){return this.plugin.connect=e,this}close(e){return this.plugin.close=e,this}}export class Plugin{ctx;static createPlugin(e){let t={name:e.name,desc:e.desc,priority:e.priority??0};return e.command&&(t.command=(Array.isArray(e.command)?e.command:[e.command]).map(t=>({...t,...e.scene&&{scene:e.scene},method:(...e)=>new this(e.shift())[t.method](...e)}))),e.middleware&&(t.middleware=(Array.isArray(e.middleware)?e.middleware:[e.middleware]).map(t=>({...t,type:e.type,...e.scene&&{scene:e.scene},method:(...e)=>new this(e.shift())[t.method](...e)}))),e.event&&(t.event=(Array.isArray(e.event)?e.event:[e.event]).map(t=>({...t,type:e.type,...e.scene&&{scene:e.scene},method:(...e)=>new this(e.shift())[t.method](...e)}))),e.schedule&&(t.schedule=(Array.isArray(e.schedule)?e.schedule:[e.schedule]).map(e=>({...e,method:t=>new this(t)[e.method]()}))),e.start&&(t.start=t=>new this(t)[e.start]()),e.stop&&(t.stop=t=>new this(t)[e.stop]()),e.connect&&(t.connect=t=>new this(t)[e.connect]()),e.close&&(t.close=t=>new this(t)[e.close]()),t}e;logger;constructor(e){this.ctx=e,this.e=e.event,this.logger=e.logger}reply(...e){if(this.ctx?.reply)return this.ctx.reply(...e)}}