import*as inquirer from"@inquirer/prompts";import{makeLogger}from"#logger";import*as Common from"#project/project/common.js";import*as Philia from"#project/project/philia.js";import{createAPI}from"#protocol/common";import{EventHandle}from"./event.js";import PluginManager from"./manager.js";export class Project extends Common.Project{philia;plugin;event;ctx_map=new Map;constructor(e,i){super(e),this.event=new EventHandle(this),this.plugin=new PluginManager(this,i),this.philia=new Philia.Project({...e.philia,opts:{...e.philia.opts,connected_fn:this.connect.bind(this),closed_fn:this.close.bind(this)}},{handle:this.event.handle.bind(this.event)})}static async createConfig(i){let a={prefix:await inquirer.input({message:`请输入命令前缀:`,default:`/`,required:!0}),split:await inquirer.input({message:`请输入命令分隔符:`,default:` `})};return{name:i,command:a,philia:await Philia.Project.createConfig(`Impl`)}}verifyConfig(){if(typeof this.config.command.prefix!=`string`||typeof this.config.command.split!=`string`)throw Error(`命令插件配置必须为字符串`)}async start(){await Promise.all([this.plugin.load(),this.philia.start()]),await this.plugin.execStart()}async stop(){await this.plugin.execStop(),await this.philia.stop()}async connect(e){try{let a=createAPI(e),o=await a.getSelfInfo(),s={client:e,api:a,self:o,logger:makeLogger(o.id)};this.ctx_map.set(e,s),s.logger.info(o.name,`连接成功`),await this.plugin.execConnect(s),await a.receiveEvent({event:[`message`,`notice`,`request`].map(e=>({type:e,handle:`handle`}))})}catch(i){this.logger.error(`客户端连接错误`,e,i),e.close()}}close(e){let i=this.ctx_map.get(e);return i?(this.ctx_map.delete(e),i.logger.info(i.self.name,`连接已断开`),this.plugin.execClose(i)):this.logger.warn(`客户端上下文不存在`,e)}}